class Graph {
  constructor() {
    this.adjacencyList = {};
  }
  addVertex(vertex) {
    if (!this.adjacencyList[vertex]) {
      this.adjacencyList[vertex] = [];
    }
  }
  addEdge(source, destination) {
    if (!this.adjacencyList[source]) {
      this.addVertex(source);
    }
    if (!this.adjacencyList[destination]) {
      this.addVertex(destination);
    }
    this.adjacencyList[source].push(destination);
    this.adjacencyList[destination].push(source);
  }
  removeEdge(source, destination) {
    this.adjacencyList[source] = this.adjacencyList[source].filter(vertex => vertex !== destination);
    this.adjacencyList[destination] = this.adjacencyList[destination].filter(vertex => vertex !== source);
  }
  removeVertex(vertex) {
    
    while (this.adjacencyList[vertex].length > 0) {
      const adjacentVertex = this.adjacencyList[vertex].pop();
      this.removeEdge(vertex, adjacentVertex);
    }
    delete this.adjacencyList[vertex];
  }  
  
  getVertexNumber(){
    console.log(Object.keys(this.adjacencyList).length);
  }
  
  getEdgeNumber(){
    
    let count = 0;
    for (let V of Object.keys(this.adjacencyList)) {
      count += this.adjacencyList[V].length
    }
    
    //grafos n√£o orientados    
    console.log(count / 2)
  }
}

let G = new Graph()

G.addVertex("A")
G.addVertex("B")
G.addVertex("C")
G.addVertex("D")

G.addEdge("A", "B")
G.addEdge("A", "C")
G.addEdge("A", "D")
G.addEdge("B", "C")
G.addEdge("B", "D")


G.getVertexNumber()
G.getEdgeNumber()
